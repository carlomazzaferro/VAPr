# standard libraries
import unittest
import os
import pandas
# from VAPr.in import ingester

# project-specific libraries
from VAPr.vcf_mappings_maker import VcfMappingsMaker

__author__ = 'Mazzaferro'


class TestFunctions(unittest.TestCase):
    # TODO: no tests for _store_mapping_for_single_vcf

    def setUp(self):
        self.base_dir = os.getcwd()
        self.input_dir_des_files = os.path.join(self.base_dir, 'test_files/test_input_dir/G1000')
        self.input_dir_des_dirs = os.path.join(self.base_dir, 'test_files/test_input_dir/G1000')
        self.samples_input_dir = os.path.join(self.base_dir, 'test_files/test_input_dir/G1000')
        self.design_file_files = os.path.join(self.base_dir, 'test_files/design_file_by_file_name.csv')
        self.design_file_dirs = os.path.join(self.base_dir, 'test_files/design_file_by_dir_name.csv')
        self.output_csv_path_files = os.path.join(self.base_dir, 'test_files/test_out_csv_path/des_file_files')
        self.output_csv_path_dirs = os.path.join(self.base_dir, 'test_files/test_out_csv_path/des_file_dirs/G1000')
        self.mapping_list_len = 2
        self.HG00096 = {'sample_names': ['G1000'],
                        'num_samples_in_csv': 1,
                        'raw_vcf_file_full_path': os.path.join(self.base_dir,
                                                               'test_files/test_input_dir/G1000/HG00096.vcf'),
                        'csv_file_basename': 'HG00096_annotated',
                        'vcf_file_basename': 'HG00096.vcf',
                        'csv_file_full_path': os.path.join(self.base_dir,
                                                           'test_files/test_out_csv_path/des_file_dirs/G1000'),
                        'extra_data': {'libType': 'singleend', 'Tissue': 'blood',
                                       'Treatment': 'CTRL', 'Condition': 'normal'},
                        'vcf_sample_dir': os.path.join(self.base_dir, 'test_files/test_input_dir/G1000')}
        self.HG00097 = {'sample_names': ['HG00097'],
                        'num_samples_in_csv': 1,
                        'raw_vcf_file_full_path': os.path.join(self.base_dir,
                                                               'test_files/test_input_dir/G1000/HG00097.vcf'),
                        'csv_file_basename': 'HG00097_annotated',
                        'vcf_file_basename': 'HG00097.vcf',
                        'csv_file_full_path': os.path.join(self.base_dir,
                                                           'test_files/test_out_csv_path/des_file_dirs/G1000/'),
                        'vcf_sample_dir': os.path.join(self.base_dir, 'test_files/test_input_dir/G1000/'),
                        'extra_data': None}


    # The following tests use mini.vcf to test the validity of the mapping that is generated by
    # the Ingester class

    def test_get_mappings_from_design_file_dirs(self):
        organizer = VcfMappingsMaker(self.input_dir_des_dirs, self.output_csv_path_dirs)
        design_df = pandas.read_csv(self.design_file_dirs)
        organizer.get_mappings_from_design_file(design_df)
        self.assertEqual(len(organizer.list_of_vcf_mapping_dicts), self.mapping_list_len)
        self.assertDictEqual(organizer.list_of_vcf_mapping_dicts[0], self.HG00096)
        for _map in organizer.list_of_vcf_mapping_dicts:
            self.assertTrue(os.path.isfile(_map['raw_vcf_file_full_path']))

    def test_get_mappings_from_directory(self):
        mappings = VcfMappingsMaker(self.input_dir_des_dirs, self.output_csv_path_dirs)
        mappings.get_mappings_from_directory()
        self.assertDictEqual(mappings.list_of_vcf_mapping_dicts[1], self.HG00097)

    def test__store_mapping_for_single_vcf(self):
        mappings = VcfMappingsMaker(self.input_dir_des_dirs, self.output_csv_path_dirs)
        mappings._store_mapping_for_single_vcf(self.HG00096['raw_vcf_file_full_path'])
        self.assertEqual(mappings.list_of_vcf_mapping_dicts[0]['raw_vcf_file_full_path'],
                         self.HG00096['raw_vcf_file_full_path'])

