# standard libraries
import unittest
import os
import pandas
# from VAPr.in import ingester

# project-specific libraries
from VAPr.vcf_mappings_maker import VcfMappingsMaker

__author__ = 'Mazzaferro'


class TestIngester(unittest.TestCase):
    # TODO: no tests for _store_mapping_for_single_vcf

    def setUp(self):
        self.base_dir = os.getcwd()
        self.files_input_dir = os.path.join(self.base_dir, 'test_files/test_input_dir')
        self.samples_input_dir = os.path.join(self.base_dir, 'test_files/test_input_sample_dir')
        self.design_file_files = os.path.join(self.base_dir, 'test_files/design_file_by_file_name.csv')
        self.design_file_dirs = os.path.join(self.base_dir, 'test_files/design_file_by_dir_name.csv')
        self.output_csv_path_files = os.path.join(self.base_dir, 'test_files/test_out_csv_path/des_file_files')
        self.output_csv_path_dirs = os.path.join(self.base_dir, 'test_files/test_out_csv_path/des_file_dirs')
        self.mapping_list_len = (12, 2)
        self.x_45_c1 = {'sample_names': ['X45'],
                        'num_samples_in_csv': 1,
                        'raw_vcf_file_full_path': os.path.join(self.base_dir, 'test_files/test_input_sample_dir/'
                                                                              'X45/c1.vcf'),
                        'csv_file_basename': 'c1_annotated',
                        'vcf_file_basename': 'c1.vcf',
                        'csv_file_full_path': os.path.join(self.base_dir, 'test_files/test_out_csv_path/'
                                                                          'des_file_dirs/X45'),
                        'extra_data': {'libType': 'singleend', 'Tissue': 'lymphoblast', 'Patient': 'JNJ005',
                                       'Treatment': 'Li', 'Condition': 'BD_lithium_responder'},
                        'vcf_sample_dir': os.path.join(self.base_dir, 'test_files/test_input_sample_dir/X45')}

        self.mini1 = {'sample_names': ['mini1.vcf'],
                      'num_samples_in_csv': 1,
                      'raw_vcf_file_full_path': os.path.join(self.base_dir, 'test_files/test_input_dir/mini1.vcf'),
                      'csv_file_basename': 'mini1_annotated',
                      'vcf_file_basename': 'mini1.vcf',
                      'csv_file_full_path': os.path.join(self.base_dir, 'test_files/test_out_csv_path/des_file_files/'),
                      'extra_data': {'libType': 'aend', 'Tissue': 'lymphoblast', 'Patient': 'JNJ006',
                                     'Treatment': 'CTRL', 'Condition': 'BD_lithium_responder'},
                      'vcf_sample_dir': os.path.join(self.base_dir, 'test_files/test_input_dir/')}

    # The following tests use mini.vcf to test the validity of the mapping that is generated by
    # the Ingester class

    def test_input_design_file_dirs(self):
        organizer = VcfMappingsMaker(self.samples_input_dir, self.output_csv_path_dirs)
        design_df = pandas.read_csv(self.design_file_dirs)
        organizer.get_mappings_from_design_file(design_df)
        self.assertEqual(len(organizer.list_of_vcf_mapping_dicts), self.mapping_list_len[0])
        self.assertEqual(organizer.list_of_vcf_mapping_dicts[-3], self.x_45_c1)

        for _map in organizer.list_of_vcf_mapping_dicts:
            self.assertTrue(os.path.isfile(_map['raw_vcf_file_full_path']))

    def test_input_design_files(self):
        organizer = VcfMappingsMaker(self.files_input_dir, self.output_csv_path_files)
        design_df = pandas.read_csv(self.design_file_files)
        organizer.get_mappings_from_design_file(design_df)
        print(organizer.list_of_vcf_mapping_dicts[0])
        self.assertEqual(len(organizer.list_of_vcf_mapping_dicts), self.mapping_list_len[1])
        self.assertEqual(organizer.list_of_vcf_mapping_dicts[0], self.mini1)
        for _map in organizer.list_of_vcf_mapping_dicts:
            self.assertTrue(os.path.isfile(_map['raw_vcf_file_full_path']))
